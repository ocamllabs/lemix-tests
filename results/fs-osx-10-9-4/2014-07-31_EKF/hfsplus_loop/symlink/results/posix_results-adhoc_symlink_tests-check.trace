        # adhoc_link_tests

        # initialization

        mkdir /dir_1 0o777
        Tau
        RV_none

        mkdir /dir_1/dir_11 0o777
        Tau
        RV_none

        mkdir /dir_2 0o777
        Tau
        RV_none


        open /dir_1/f1.txt [O_CREAT;O_RDWR] 0o666
        Tau
        RV_num(3)

        write! (FD 3) "content of /dir_1/f1.txt" 24
        Tau
        RV_num(24)

        close (FD 3)
        Tau
        RV_none


        open /dir_1/f2.txt [O_CREAT;O_RDWR] 0o666
        Tau
        RV_num(3)

        write! (FD 3) "content of /dir_1/f2.txt" 24
        Tau
        RV_num(24)

        close (FD 3)
        Tau
        RV_none


        open /dir_2/f1.txt [O_CREAT;O_RDWR] 0o666
        Tau
        RV_num(3)

        write! (FD 3) "content of /dir_2/f1.txt" 24
        Tau
        RV_num(24)

        close (FD 3)
        Tau
        RV_none



        ###################################################
        # simple tests, that mimic common use-cases
        ###################################################

        # create a symlink to an existing file an read the file
        # through the symlink

        symlink /dir_1/f1.txt /symlink_1
        Tau
        RV_none

        open /symlink_1 [O_RDONLY]
        Tau
        RV_num(3)

        pread! (FD 3) 1000 0
        Tau
        RV_bytes("content of /dir_1/f1.txt")

        close (FD 3)
        Tau
        RV_none


        # try two indirections
        symlink /symlink_1 /symlink_2
        Tau
        RV_none

        open /symlink_2 [O_RDONLY]
        Tau
        RV_num(3)

        pread! (FD 3) 1000 0
        Tau
        RV_bytes("content of /dir_1/f1.txt")

        close (FD 3)
        Tau
        RV_none

        dump-result
           /|D|4685
           /symlink_2|L|/symlink_1
           /dir_2|D|4713
        end dump-result

        # remove symlink 1 and read symlink 2
        unlink /symlink_1
        Tau
        RV_none

        open /symlink_2 [O_RDONLY]
        Tau
        ENOENT

        pread! (FD 3) 1000 0
        Tau
        EBADF

        close (FD 3)
        Tau
        EBADF

        dump-result
           /|D|4685
           /dir_2|D|4713
        end dump-result

        # now try symbolic links to a directory
        symlink /dir_1 /symlink_1
        Tau
        RV_none


        open /symlink_1/f1.txt [O_RDONLY]
        Tau
        RV_num(3)

        pread! (FD 3) 1000 0
        Tau
        RV_bytes("content of /dir_1/f1.txt")

        close (FD 3)
        Tau
        RV_none


        open /symlink_2/f1.txt [O_RDONLY]
        Tau
        RV_num(3)

        pread! (FD 3) 1000 0
        Tau
        RV_bytes("content of /dir_1/f1.txt")

        close (FD 3)
        Tau
        RV_none


        # renaming of symbolic links renames links not pointed to files
        rename /symlink_2 /symlink_2b
        Tau
        RV_none

        dump-result
           /|D|4685
           /symlink_2b|L|/symlink_1
           /dir_2|D|4713
        end dump-result
        open /symlink_2b/f1.txt [O_RDONLY]
        Tau
        RV_num(3)

        pread! (FD 3) 1000 0
        Tau
        RV_bytes("content of /dir_1/f1.txt")

        close (FD 3)
        Tau
        RV_none


        open /dir_1/f1.txt [O_RDONLY]
        Tau
        RV_num(3)

        pread! (FD 3) 1000 0
        Tau
        RV_bytes("content of /dir_1/f1.txt")

        close (FD 3)
        Tau
        RV_none


        open /symlink_2/f1.txt [O_RDONLY]
        Tau
        ENOENT

        pread! (FD 3) 1000 0
        Tau
        EBADF

        close (FD 3)
        Tau
        EBADF


        dump-result
           /|D|4685
           /symlink_2b|L|/symlink_1
           /dir_2|D|4713
        end dump-result


        # try relative symbolic links
        symlink f2.txt /dir_1/symlink_f2.txt
        Tau
        RV_none

        open /dir_1/symlink_f2.txt [O_RDONLY]
        Tau
        RV_num(3)

        pread! (FD 3) 1000 0
        Tau
        RV_bytes("content of /dir_1/f2.txt")

        close (FD 3)
        Tau
        RV_none


        symlink ../dir_2/f1.txt /dir_1/symlink_d2_f1.txt
        Tau
        RV_none

        open /dir_1/symlink_d2_f1.txt [O_RDONLY]
        Tau
        RV_num(3)

        pread! (FD 3) 1000 0
        Tau
        RV_bytes("content of /dir_2/f1.txt")

        close (FD 3)
        Tau
        RV_none


        # read the content of symbolic links
        readlink /symlink_1
        Tau
        RV_bytes("/dir_1")

        readlink /symlink_1/
        Tau
        EINVAL

        readlink /no_such_link
        Tau
        ENOENT

        readlink /symlink_1b
        Tau
        ENOENT

        readlink /symlink_1b/
        Tau
        ENOENT

        readlink /dir_1/symlink_f2.txt
        Tau
        RV_bytes("f2.txt")

        readlink /dir_1/symlink_d2_f1.txt
        Tau
        RV_bytes("../dir_2/f1.txt")


        # cleanup
        dump-result
           /|D|4685
           /symlink_2b|L|/symlink_1
           /dir_2|D|4713
        end dump-result
        unlink /symlink_1
        Tau
        RV_none

        unlink /symlink_2b
        Tau
        RV_none

        unlink /dir_1/symlink_f2.txt
        Tau
        RV_none

        unlink /dir_1/symlink_d2_f1.txt
        Tau
        RV_none

        dump-result
           /|D|4685
           /dir_2|D|4713
        end dump-result


        ###################################################
        # testing for corners
        ###################################################

        # linking to non-existing is OK
        symlink /no_such_dir/ /slink_no_such1
        Tau
        RV_none

        symlink /no_such_file /slink_no_such2
        Tau
        RV_none

        chdir /slink_no_such1
        Tau
        ENOENT

        chdir /slink_no_such1/
        Tau
        ENOENT

        chdir /slink_no_such2
        Tau
        ENOENT

        chdir /slink_no_such2/
        Tau
        ENOENT

        chdir /slink_no_such1/something_else
        Tau
        ENOENT

        chdir /slink_no_such1/something_else/
        Tau
        ENOENT

        mkdir /slink_no_such1/ 0o777
        Tau
        RV_none

        mkdir /slink_no_such1/ss 0o777
        Tau
        RV_none

        mkdir /slink_no_such1 0o777
        Tau
        EEXIST

        mkdir /slink_no_such2/ 0o777
        Tau
        RV_none

        mkdir /slink_no_such2/ss 0o777
        Tau
        RV_none

        mkdir /slink_no_such2 0o777
        Tau
        EEXIST

        unlink /slink_no_such1
        Tau
        RV_none

        unlink /slink_no_such2
        Tau
        RV_none

        dump-result
           /|D|4685
           /dir_2|D|4713
           /no_such_file|D|4817
        end dump-result

        # existing files and dirs canot be overriden by symlink
        symlink /dir_1 /dir_2
        Tau
        EEXIST

        symlink /dir_1 /dir_1/f1.txt
        Tau
        EEXIST

        symlink /dir_1 /dir_1/symlink.txt
        Tau
        RV_none

        symlink /dir_2 /dir_1/symlink.txt
        Tau
        EEXIST

        unlink /dir_1/symlink.txt
        Tau
        RV_none

        dump-result
           /|D|4685
           /dir_2|D|4713
           /no_such_file|D|4817
        end dump-result

        # the new link name must not end with a slash
        symlink xyz /slink_1
        Tau
        RV_none

        symlink xyz /slink_2/
        Tau
        ENOENT

        unlink /slink_1
        Tau
        RV_none

        dump-result
           /|D|4685
           /dir_2|D|4713
           /no_such_file|D|4817
        end dump-result

        # cyclic links can be created, but raise ELOOP when followed
        symlink /cyclic_link1 /cyclic_link2
        Tau
        RV_none

        symlink /cyclic_link2 /cyclic_link1
        Tau
        RV_none

        chdir /cyclic_link1
        Tau
        ELOOP

        unlink /cyclic_link1
        Tau
        RV_none

        unlink /cyclic_link2
        Tau
        RV_none

        dump-result
           /|D|4685
           /dir_2|D|4713
           /no_such_file|D|4817
        end dump-result

        # playing around with trailing slashes
        symlink /dir_1/f1.txt /filelink
        Tau
        RV_none

        symlink /dir_1 /dirlink
        Tau
        RV_none

        dump-result
           /|D|4685
           /filelink|L|/dir_1/f1.txt
           /dir_2|D|4713
           /no_such_file|D|4817
        end dump-result

        open_close /filelink [O_RDONLY]
        Tau
        RV_none

        open_close /filelink [O_RDONLY]
        Tau
        RV_none


        chdir /dirlink
        Tau
        RV_none

        chdir /dirlink/
        Tau
        RV_none

        open_close f1.txt [O_RDONLY]
        Tau
        RV_none

        unlink /dirlink
        Tau
        RV_none

        unlink /filelink
        Tau
        RV_none

        chdir /
        Tau
        RV_none

        dump-result
           /|D|4685
           /dir_2|D|4713
           /no_such_file|D|4817
        end dump-result

        # follow a symlink to a dir and then go to parent dir
        symlink /dir_1/dir_11 /dirlink
        Tau
        RV_none

        chdir /dirlink
        Tau
        RV_none

        chdir ..
        Tau
        RV_none

        # we should be in /dir_1 now, not /, so we can read f1.txt
        open_close f1.txt [O_RDONLY]
        Tau
        RV_none

        open_close dir_1/f1.txt [O_RDONLY]
        Tau
        ENOENT

        unlink /dirlink
        Tau
        RV_none

        dump-result
           /|D|4685
           /dir_2|D|4713
           /no_such_file|D|4817
        end dump-result


        ###################################################
        # whether a symbolic link that occurs as the last
        # component of a resolved path is followed depends
        # on the command, so test it for all commands
        ###################################################

        symlink /dir_1 /dir_link
        Tau
        RV_none

        symlink /dir_1/f1.txt /file_link
        Tau
        RV_none


        link /dir_1 /dir_3
        Tau
        EPERM

        link /dir_link /dir_4
        Tau
        EPERM

        link /dir_1/f1.txt /f1.txt
        Tau
        RV_none

        link /file_link /f2.txt
        Tau
        RV_none


        mkdir /dir_link 0o777
        Tau
        EEXIST

        mkdir /file_link 0o777
        Tau
        EEXIST

        mkdir /dir_1 0o777
        Tau
        EEXIST

        mkdir /dir_1/f1.txt 0o777
        Tau
        EEXIST


        symlink /dir_5 /new_dir_link
        Tau
        RV_none

        mkdir /new_dir_link 0o777
        Tau
        EEXIST


        symlink /f_5 /new_file_link_1
        Tau
        RV_none

        symlink /f_6 /new_file_link_2
        Tau
        RV_none

        open_close /new_file_link_1 [O_CREAT;O_RDWR] 0o666
        Tau
        RV_none

        symlink xyz /new_file_link_2
        Tau
        EEXIST


        stat /dir_link
        Tau
        { st_dev=16777220; st_ino=4701; st_kind=S_IFDIR; st_perm=0o755; st_nlink=3; st_uid=-1; st_gid=-1; st_rdev=0; st_size=170; }

        stat /file_link
        Tau
        { st_dev=16777220; st_ino=4717; st_kind=S_IFREG; st_perm=0o644; st_nlink=3; st_uid=-1; st_gid=-1; st_rdev=0; st_size=24; }


        truncate /file_link 0
        Tau
        RV_none

        stat /file_link
        Tau
        { st_dev=16777220; st_ino=4717; st_kind=S_IFREG; st_perm=0o644; st_nlink=3; st_uid=-1; st_gid=-1; st_rdev=0; st_size=0; }

        dump-result
           /|D|4685
           /f1.txt|F|4717|0|da39a3ee5e6b4b0d3255bfef95601890afd80709
           /f_5|F|5008|0|da39a3ee5e6b4b0d3255bfef95601890afd80709
           /new_dir_link|L|/dir_5
           /new_file_link_2|L|/f_6
           /dir_2|D|4713
           /no_such_file|D|4817
        end dump-result

